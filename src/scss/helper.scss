@import '~@/scss/colors';
@import '~@/scss/fonts';
@import '~@/scss/mixins';
@import '~@/scss/_dimensions';
// ALL HELPER CLASSES LIVE HERE

// FONT WEIGHTS
// .font-light, .font-book, .font-medium, .font-extrabold, .font-black
.font {
  @include map-to-helpers($fonts, 'font-family', false);
}

// Z-INDEX
// .z-0, .z-1, ..., .z-100
.z {
  @for $i from 1 through 100 {
    @include create-helper($i, $i, 'z-index');
  }
  @include create-helper('auto', 'auto', 'z-index');
}

// CURSOR
.cursor {
  &-pointer {
    cursor: pointer;
  }
  &-default {
    cursor: default;
  }
}

// BOX SHADOW
.shadow {
  &-none {
    box-shadow: 0 0 0 rgba($black-true, 0);
  }
}

// BORDER WIDTH AND STYLE
$border-styles: 'solid', 'dashed', 'dotted', 'double', 'none';
$border-widths: 0, 2, 4;
$border-directions: (
  'bottom': 'b',
  'top': 't',
  'left': 'l',
  'right': 'r',
);
.border {
  border-width: 1px;
  @each $border-width in $border-widths {
    @include create-helper($border-width, #{$border-width}px, 'border-width');
    &-y-#{$border-width} {
      border-top-width: #{$border-width}px;
      border-bottom-width: #{$border-width}px;
    }
    &-x-#{$border-width} {
      border-left-width: #{$border-width}px;
      border-right-width: #{$border-width}px;
    }
    @each $border-direction,
      $border-direction-abbreviation in $border-directions
    {
      @include create-helper(
        $border-width,
        #{$border-width}px,
        'border-#{$border-direction}-width',
        false,
        '-#{$border-direction-abbreviation}-'
      );
    }
  }
  @each $border-direction, $border-direction-abbreviation in $border-directions
  {
    @include create-helper(
      $border-direction-abbreviation,
      1px,
      'border-#{$border-direction}-width'
    );
  }
  @each $style in $border-styles {
    @include create-helper($style, #{unquote($style)}, 'border-style');
  }
  @include map-to-helpers($colors, 'border-color', true);
}

// BACKGROUND
// .background-#{color} for every color in our color library
.background {
  @include map-to-helpers($colors, 'background-color', true);
}

// TEXT
// .text-#{color} for every color in our color library
.text {
  @include map-to-helpers($colors, 'color', true);
}

// WIDTH
// .w-0, .w-1,..., .w-16, .w-20, .w-24, ... , .w-200
.w {
  @include map-to-helpers($dimensions, 'width', false);
}

// MAX-WIDTH
// .max-w-0, .max-w-1,..., .max-w-16, .max-w-20, .max-w-24, ... , .max-w-200
.max-w {
  @include map-to-helpers($dimensions, 'max-width', true);
}

// HEIGHT
// .h-0, .h-1,..., .h-16, .h-20, .h-24, ... , .h-200
.h {
  @include map-to-helpers($dimensions, 'height', false);
}

//FLEX
.shrink {
  flex-shrink: 1 !important;
}

//OPACITY
.opacity {
  $percent: 0;
  @while $percent <= 100 {
    @include create-helper($percent, $percent / 100, 'opacity');
    $percent: $percent + 5;
  }
}
