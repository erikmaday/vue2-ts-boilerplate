@import './_colors-export';
@import './fonts';
@import './mixins';
@import './_dimensions';
@import './_pseudoclasses';
@import './variables';
// ALL HELPER CLASSES LIVE HERE

// FONT
// .font-light, .font-book, .font-medium, .font-extrabold, .font-black
$base-class: 'font';
@include map-to-helpers(
  $base-class,
  $fonts,
  'font-family',
  $pseudo-classes,
  true
);
@include map-to-helpers(
  $base-class,
  $font-sizes,
  'font-size',
  $pseudo-classes,
  true
);

// FONT WEIGHTS
$base-class: 'font-weight';
@include map-to-helpers(
  $base-class,
  $font-weights,
  'font-weight',
  $pseudo-classes,
  true
);

// Z-INDEX
// .z-0, .z-1, ..., .z-100
$base-class: 'z';
@for $i from 1 through 100 {
  @include create-helper-with-pseudo-classes(
    $base-class,
    $i,
    $i,
    'z-index',
    $pseudo-classes
  );
}
@include create-helper-with-pseudo-classes(
  $base-class,
  'auto',
  'auto',
  'z-index',
  $pseudo-classes
);

// CURSOR
$cursors: alias, all-scroll, auto, cell, copy, default, grab, grabbing, help,
  move, no-drop, none, not-allowed, pointer, progress, text, wait, zoom-in,
  zoom-out;
$base-class: 'cursor';
@each $cursor in $cursors {
  @include create-helper-with-pseudo-classes(
    $base-class,
    $cursor,
    $cursor,
    'cursor',
    $pseudo-classes,
    true
  );
}

// WORD BREAK
// .wb-normal, .wb-break-all...
$word-breaks: normal, break-all, keep-all, break-word, initial, inherit;
$base-class: 'wb';
@each $word-break in $word-breaks {
  @include create-helper-with-pseudo-classes(
    $base-class,
    $word-break,
    $word-break,
    'word-break',
    $pseudo-classes
  );
}

// BOX SHADOW
.shadow {
  &-none {
    box-shadow: 0 0 0 rgba($black-true, 0);
  }
}

// BORDER WIDTH, STYLE, AND COLOR
$directions: (
  'bottom': 'b',
  'top': 't',
  'left': 'l',
  'right': 'r',
);
$border-styles: 'solid', 'dashed', 'dotted', 'double', 'none';
$border-widths: 0, 1, 2, 4;
$base-class: 'border';

@include create-helper-with-pseudo-classes(
  $base-class,
  '',
  1px,
  'border-width',
  $pseudo-classes,
  true,
  ''
);
@each $border-width in $border-widths {
  @include create-helper-with-pseudo-classes(
    $base-class,
    $border-width,
    #{$border-width}px,
    'border-width',
    $pseudo-classes
  );

  @include create-helper-with-pseudo-classes(
    $base-class,
    $border-width,
    #{$border-width}px,
    ('border-top-width', 'border-bottom-width'),
    $pseudo-classes,
    false,
    '-y-'
  );
  @include create-helper-with-pseudo-classes(
    $base-class,
    $border-width,
    #{$border-width}px,
    ('border-left-width', 'border-right-width'),
    $pseudo-classes,
    false,
    '-x-'
  );
  @each $border-direction, $border-direction-abbreviation in $directions {
    @include create-helper-with-pseudo-classes(
      $base-class,
      $border-width,
      #{$border-width}px,
      'border-#{$border-direction}-width',
      $pseudo-classes,
      false,
      '-#{$border-direction-abbreviation}-'
    );
  }
}
@each $border-direction, $border-direction-abbreviation in $directions {
  @include create-helper-with-pseudo-classes(
    $base-class,
    $border-direction-abbreviation,
    1px,
    'border-#{$border-direction}-width',
    $pseudo-classes
  );
}
@each $style in $border-styles {
  @include create-helper-with-pseudo-classes(
    $base-class,
    $style,
    #{unquote($style)},
    'border-style',
    $pseudo-classes
  );
}
@include map-to-helpers(
  $base-class,
  $colors,
  'border-color',
  $pseudo-classes,
  true
);
@include create-helper-with-pseudo-classes(
  $base-class,
  'transparent',
  #{unquote('transparent')},
  'border-color',
  $pseudo-classes
);

// BORDER RADIUS
$border-radius-map: (
  'none': 0,
  '1': 1px,
  '2': 2px,
  '3': 3px,
  '4': 4px,
  '5': 5px,
  '8': 8px,
  '12': 12px,
  'round': 50%,
  'regular': $border-radius-root,
  '2x': $border-radius-root * 2,
);
$border-radius-directions: (
  'top-left',
  'top-right',
  'bottom-right',
  'bottom-left'
);

$base-class: 'border-radius';
@include map-to-helpers(
  $base-class,
  $border-radius-map,
  $base-class,
  $pseudo-classes,
  true
);

@each $border-radius-direction in $border-radius-directions {
  @include map-to-helpers(
    $base-class,
    $border-radius-map,
    'border-#{$border-radius-direction}-radius',
    $pseudo-classes,
    true,
    $prefix: '-#{$border-radius-direction}-'
  );
}

// BACKGROUND
// .background-#{color} for every color in our color library
$base-class: 'background';
@include map-to-helpers(
  $base-class,
  $colors,
  'background-color',
  $pseudo-classes,
  true
);

// TEXT
// .text-#{color} for every color in our color library
$base-class: 'text';
@include map-to-helpers($base-class, $colors, 'color', $pseudo-classes, true);

// WIDTH
// .w-0, .w-1,..., .w-16, .w-20, .w-24, ... , .w-200
$base-class: 'w';
@include map-to-helpers($base-class, $dimensions, 'width', $pseudo-classes);

// MAX-WIDTH
// .max-w-0, .max-w-1,..., .max-w-16, .max-w-20, .max-w-24, ... , .max-w-200
$base-class: 'max-w';
@include map-to-helpers(
  $base-class,
  $dimensions,
  'max-width',
  $pseudo-classes,
  true
);

// MAX-WIDTH
// .max-h-0, .max-h-1,..., .max-h-16, .max-h-20, .max-h-24, ... , .max-h-200
$base-class: 'max-h';
@include map-to-helpers(
  $base-class,
  $dimensions,
  'max-height',
  $pseudo-classes,
  true
);

// HEIGHT
// .h-0, .h-1,..., .h-16, .h-20, .h-24, ... , .h-200
$base-class: 'h';
@include map-to-helpers($base-class, $dimensions, 'height', $pseudo-classes);

//FLEX
.shrink {
  flex-shrink: 1 !important;
}

// TRANSITION
$milliseconds: 50;
$time-map: ();
@while $milliseconds <= 1000 {
  $time-map: map-merge(
    $time-map,
    (
      '#{$milliseconds}': #{$milliseconds/1000}s,
    )
  );
  $milliseconds: $milliseconds + 50;
}

$base-class: 'transition-duration';
@include map-to-helpers(
  $base-class,
  $time-map,
  'transition-duration',
  $pseudo-classes,
  true
);

$base-class: 'transition-delay';
@include map-to-helpers(
  $base-class,
  $time-map,
  'transition-delay',
  $pseudo-classes,
  true
);

$transition-timing-functions: (
  'linear': linear,
  'ease': ease,
  'ease-in': ease-in,
  'ease-out': ease-out,
  'ease-in-out': ease-in-out,
  'all': all,
);

$base-class: 'transition';
@include map-to-helpers(
  $base-class,
  $time-map,
  'transition-timing-function',
  $pseudo-classes,
  true
);

$transition-properties: (
  'all': all,
);
@include map-to-helpers(
  $base-class,
  $transition-properties,
  'transition-property',
  $pseudo-classes,
  true
);

//OPACITY
$base-class: 'opacity';
$percent: 0;
@while $percent <= 100 {
  @include create-helper-with-pseudo-classes(
    $base-class,
    $percent,
    $percent / 100,
    'opacity',
    $pseudo-classes
  );
  $percent: $percent + 5;
}

// PADDING AND MARGIN
$base-classes: 'padding', 'margin';

@each $base-class in $base-classes {
  @each $dimension-key, $dimension-value in $padding-margin-dimensions {
    @include create-helper-with-pseudo-classes(
      $base-class,
      $dimension-key,
      $dimension-value,
      $base-class,
      $pseudo-classes,
      true,
      '-a-'
    );
    @include create-helper-with-pseudo-classes(
      $base-class,
      $dimension-key,
      $dimension-value,
      ('#{$base-class}-top', '#{$base-class}-bottom'),
      $pseudo-classes,
      true,
      '-y-'
    );
    @include create-helper-with-pseudo-classes(
      $base-class,
      $dimension-key,
      $dimension-value,
      ('#{$base-class}-right', '#{$base-class}-left'),
      $pseudo-classes,
      true,
      '-x-'
    );
    @each $direction, $direction-abbreviation in $directions {
      @include create-helper-with-pseudo-classes(
        $base-class,
        $dimension-key,
        $dimension-value,
        '#{$base-class}-#{$direction}',
        $pseudo-classes,
        true,
        '-#{$direction-abbreviation}-'
      );
    }
  }
}

// ABSOLUTE POSITIONING 
// top-#, left-#, etc. 
$base-classes: 'top', 'left', 'bottom', 'right';
@each $base-class in $base-classes {
  @include map-to-helpers(
    $base-class,
    $dimensions,
    $base-class,
    $pseudo-classes,
    true
  );

  @each $dimension-key, $dimension-value in $padding-margin-dimensions {
    @include create-helper-with-pseudo-classes(
      $base-class,
      $dimension-key,
      $dimension-value,
      $base-class,
      $pseudo-classes,
      true
    );
  }
}

// WHITE SPACE
$base-class: 'white-space';
$white-space-map: (
  'normal': normal,
  'nowrap': nowrap,
  'pre': pre,
  'pre-wrap': pre-wrap,
  'pre-line': pre-line,
  'break-spaces': break-spaces,
);
@include map-to-helpers(
  $base-class,
  $white-space-map,
  'white-space',
  $pseudo-classes,
  true
);

//TRANSFORM
$base-class: 'transform';
$scale: 10;
$scale-map: (
  '105': scale(1.05),
);
@while $scale < 100 {
  $scale-calc: (100 + $scale) / 100;
  $scale-map: map-merge(
    $scale-map,
    (
      '1#{$scale}': scale($scale-calc),
    )
  );
  $scale: $scale + 5;
}
@include map-to-helpers(
  $base-class,
  $scale-map,
  'transform',
  $pseudo-classes,
  true
);

// POSITION
$position-map: (
  'static': static,
  'relative': relative,
  'fixed': fixed,
  'absolute': absolute,
  'sticky': sticky,
);
$base-class: 'position';
@include map-to-helpers(
  $base-class,
  $position-map,
  'position',
  $pseudo-classes,
  true
);
$base-class: 'top';
@include map-to-helpers(
  $base-class,
  $dimensions,
  $base-class,
  $pseudo-classes,
  true
);
$base-class: 'left';
@include map-to-helpers(
  $base-class,
  $dimensions,
  $base-class,
  $pseudo-classes,
  true
);
$base-class: 'right';
@include map-to-helpers(
  $base-class,
  $dimensions,
  $base-class,
  $pseudo-classes,
  true
);
$base-class: 'bottom';
@include map-to-helpers(
  $base-class,
  $dimensions,
  $base-class,
  $pseudo-classes,
  true
);

// OBJECT FIT
$base-class: 'object-fit';
$object-fit-map: (
  'fill': fill,
  'contain': contain,
  'cover': cover,
  'none': none,
  'scale-down': scale-down,
);
@include map-to-helpers(
  $base-class,
  $object-fit-map,
  'object-fit',
  $pseudo-classes,
  true
);

// OVERFLOW
$base-class: 'overflow';
$overflow-map: (
  'visible': visible,
  'hidden': hidden,
  'scroll': scroll,
  'auto': auto,
);
@include map-to-helpers(
  $base-class,
  $overflow-map,
  $base-class,
  $pseudo-classes,
  true
);

// OUTLINE
$base-class: 'outline';
$outline-style-map: (
  'dotted': dotted,
  'dashed': dashed,
  'solid': solid,
  'double': double,
  'groove': groove,
  'ridge': ridge,
  'inset': inset,
  'none': none,
  'hidden': hidden,
);
@include map-to-helpers(
  $base-class,
  $outline-style-map,
  $base-class,
  $pseudo-classes,
  true
);
