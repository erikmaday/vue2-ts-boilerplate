import { VuexModule, Module, Action } from 'vuex-class-modules'
import { Trip, TableViewTrip } from '@/models/dto'
import tripService from '@/services/trip'
import { getExistingBidsByTripId } from '@/utils/bid'
import { TableViewBid } from '@/models/dto/TableViewBid'
import { filter } from '@/utils/filter'

@Module({ generateMutationSetters: true })
class BidDetailModule extends VuexModule {
  // state
  trip: Trip | null = null
  trips: TableViewTrip[] | null = null
  tripDetails: Trip[] = []
  bids: { [tripId: number]: TableViewBid } | null = null
  isEnteringBid = false
  bidAmounts: { [tripId: number]: number | null } = {}

  // getters
  get getTrip() {
    return this.trip
  }

  get getTrips() {
    return this.trips
  }

  get getTripDetails() {
    return this.tripDetails
  }

  get getBids() {
    return this.bids
  }

  get getBid() {
    if (this.bids && this.trip) {
      return this.bids[this.trip.tripId]
    }
    return null
  }

  get getIsEnteringBid() {
    return this.isEnteringBid
  }

  get getBidAmounts() {
    return this.bidAmounts
  }

  // mutations (mutations are autogenerated for each root level state field)

  // actions
  @Action
  reset(): void {
    this.trip = null
    this.trips = null
    this.tripDetails = []
    this.bids = null
    this.bidAmounts = {}
    this.isEnteringBid = false
  }
  @Action
  async fetchTripsListByQuoteId(quoteId: number): Promise<void> {
    const params = {
      page: 1,
      pageSize: -1,
      sorts: undefined,
      filters: undefined,
    }
    const tripsResponse = await tripService.tableView(
      params,
      false,
      quoteId.toString()
    )
    this.trips = tripsResponse.data.resultList.map(
      (trip) => processTrip(trip) as TableViewTrip
    )
  }

  @Action
  async fetchTripsListByTripId(tripId: number): Promise<void> {
    const filters = filter()
    const filterParentAnd = filters.createParent('and')
    const filterTripId = {
      column: {
        _t_id: 'd971872d-fb98-4b7a-899d-1a47fc4551ae',
        prop: 'tripId',
        filterType: 'eq',
      },
      value: tripId,
    }
    filters.add(filterParentAnd, filterTripId)
    const params = {
      page: 1,
      pageSize: -1,
      sorts: undefined,
      filters: filters.asQueryParams(),
    }
    const tripsResponse = await tripService.tableView(params, false)
    this.trips = tripsResponse.data.resultList.map(
      (trip) => processTrip(trip) as TableViewTrip
    )
  }

  @Action
  async fetchAllTripDetails(tripIds: number[] = []): Promise<void> {
    if ((!tripIds.length || !tripIds) && this.trips) {
      tripIds = this.trips.map((trip) => trip.tripId)
    }
    if (tripIds.length) {
      const tripDetails: Trip[] = []
      for (const tripId of tripIds) {
        const trip = await fetchTripDetail(tripId)
        tripDetails.push(trip)
      }
      this.tripDetails = tripDetails
    }
  }

  @Action
  async fetchExistingBids(tripIds: number[] = []): Promise<void> {
    if ((!tripIds.length || !tripIds) && this.trips) {
      tripIds = this.trips.map((trip) => trip.tripId)
    }
    if (tripIds.length) {
      const bids: { [tripId: number]: TableViewBid } = {}
      for (const tripId of tripIds) {
        const bid = await fetchExistingBidByTripId(tripId)
        bids[tripId] = bid
        this.bidAmounts[tripId] = bid?.bidAmount || null
      }
      this.bids = bids
    }
  }

  @Action
  selectTrip(tripId: number): void {
    this.trip = this.tripDetails.find((trip) => trip.tripId === tripId) || null
  }

  @Action
  deselectTrip(): void {
    this.trip = null
  }

  @Action
  setTripBidAmount(tripBid: { tripId: number; bidAmount: number }): void {
    this.bidAmounts[tripBid.tripId] = tripBid.bidAmount
    if (this.bids?.[tripBid.tripId]) {
      this.bids[tripBid.tripId].bidAmount = tripBid.bidAmount
    }
  }

  @Action
  setIsEnteringBid(value: boolean): void {
    this.isEnteringBid = value
  }
}

const processTrip = (trip: Trip | TableViewTrip): Trip | TableViewTrip => {
  if (trip.stops) {
    trip.stops = trip.stops.sort((a, b) => a.orderIndex - b.orderIndex)
  }
  return trip
}

const fetchTripDetail = async (tripId: number): Promise<Trip> => {
  const tripResponse = await tripService.byId(tripId)
  return processTrip(tripResponse.data.trip) as Trip
}

const fetchExistingBidByTripId = async (
  tripId: number
): Promise<TableViewBid> => {
  const bidsResult = await getExistingBidsByTripId(tripId)
  const existingBids = bidsResult.data.resultList.filter(
    (bid: TableViewBid) => bid.active
  )
  return existingBids?.[0] || null
}

// register module
import store from '@/store/index'
export default new BidDetailModule({ store, name: 'bidDetail' })
